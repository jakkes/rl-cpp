# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: rlbuf/remote_env/lunar_lander.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import (
    TYPE_CHECKING,
    AsyncIterable,
    AsyncIterator,
    Dict,
    Iterable,
    List,
    Optional,
    Union,
)

import betterproto
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase


if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


@dataclass(eq=False, repr=False)
class State(betterproto.Message):
    data: List[float] = betterproto.float_field(1)


@dataclass(eq=False, repr=False)
class Observation(betterproto.Message):
    reward: float = betterproto.float_field(1)
    terminal: bool = betterproto.bool_field(2)
    next_state: "State" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class Action(betterproto.Message):
    action: int = betterproto.int32_field(1)


class LunarLanderServiceStub(betterproto.ServiceStub):
    async def env_stream(
        self,
        action_iterator: Union[AsyncIterable["Action"], Iterable["Action"]],
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator["Observation"]:
        async for response in self._stream_stream(
            "/rlbuf.remote_env.lunar_lander.LunarLanderService/EnvStream",
            action_iterator,
            Action,
            Observation,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response


class LunarLanderServiceBase(ServiceBase):
    async def env_stream(
        self, action_iterator: AsyncIterator["Action"]
    ) -> AsyncIterator["Observation"]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_env_stream(
        self, stream: "grpclib.server.Stream[Action, Observation]"
    ) -> None:
        request = stream.__aiter__()
        await self._call_rpc_handler_server_stream(
            self.env_stream,
            stream,
            request,
        )

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/rlbuf.remote_env.lunar_lander.LunarLanderService/EnvStream": grpclib.const.Handler(
                self.__rpc_env_stream,
                grpclib.const.Cardinality.STREAM_STREAM,
                Action,
                Observation,
            ),
        }
